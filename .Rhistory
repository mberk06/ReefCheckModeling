logisticROC <- roc(dd$Y, logistic$fitted.values)
########################
#libraries
######################
library(car) #VIF
library(pROC) #roc()
library(caret) #confusion matrix, CV
library(e1071) #confusion matrix helper
library(generalhoslem) #hosmer lemeshow test
library(MASS) #LDA
library(calibrate) #calibrate
library(randomForest) #rf
library(neuralnet) #NN
library(gbm) #quantile boosting
library(tidymodels) #super learner
library(tidyr)
library(furrr)
######################
#Modeling
######################
#Logistic Regression
#No cv
#accuracy: 0.7589226
#threshold: 0.54
logistic <- glm(model, data = dd, family="binomial")
#roc curve
plot.roc(dd$Y, logistic$fitted.values)
logisticROC <- roc(dd$Y, logistic$fitted.values)
logisticThreshold <- coords(logisticROC, "best", ret = "threshold") #get optimal threshold
auc <- logisticROC$auc #auc
#confusion matrix
response <- as.factor(as.character(ifelse(logistic$fitted.values > logisticThreshold, 1, 0)))
confusionMatrix(dd$Y, response)
dif <- 0
for (i in 1:(length(t$SPREAD)-1)) {
dif <- (dif+(spread[i+1]-spread[i]))/2
}
t <- read.csv("/Users/michaelberk/documents/Schork/Schork Project/Modeling/X_V_spread.csv")
spread <- t$X_CLOSE - t$V_CLOSE
dif <- 0
for (i in 1:(length(t$SPREAD)-1)) {
dif <- (dif+(spread[i+1]-spread[i]))/2
}
dif
spread
dif <- 0
for (i in 1:(length(t$SPREAD)-1)) {
dif <- (dif+(spread[i+1]-spread[i]))/2
}
dif
dif <- c()
for (i in 1:(length(t$SPREAD)-1)) {
dif <- c(dif,(spread[i+1]-spread[i]))
}
sif
dif
summary(dif)
sort(dif)
head(sort(dif))
head(sort(dif, descending=T))
head(sort(dif, ascending=T))
?sort
?order
?sort
head(sort(dif, decreasing =F))
head(sort(dif, decreasing = F))
head(sort(dif, decreasing = T))
summary(dif)
t <- read.csv("/Users/michaelberk/documents/Schork/Schork Project/Modeling/X_V_spread.csv")
spread <- t$X_CLOSE - t$V_CLOSE
summary(t)
dif <- c()
for (i in 1:(length(t$SPREAD)-1)) {
dif <- c(dif,(spread[i+1]-spread[i]))
}
summary(dif)
plot(dif)
plot(t$SPREAD)
t <- read.csv("/Users/michaelberk/documents/Schork/Schork Project/Modeling/X_V_spread.csv")
summary(t$GET_OUT)
dif <- c()
for (i in 1:(length(t$SPREAD)-1)) {
dif <- c(dif,(spread[i+1]-spread[i]))
}
summary(dif)
(0.01-0.05)/0.05
100*(0.01-0.05)/0.05
100*(0.1-0.05)/0.05
100*(0.04999-0.05)/0.05
summary(t$SPREAD)
V <- 2.621
X <- 2.676
V-X
V <- 2.621
V*0.05
V*0.001
V*0.01
t <- read.csv("/Users/michaelberk/documents/Schork/Schork Project/Modeling/X_V_spread.csv")
spread <- t$X_CLOSE - t$V_CLOSE
spread
table(t$SPIKE_FORECASTED)
t <- read.csv("/Users/michaelberk/documents/Schork/Schork Project/Modeling/X_V_spread.csv")
table(t$SPIKE_FORECASTED)
dif <- c()
for (i in 1:(length(t$SPREAD)-1)) {
dif <- c(dif,(spread[i+1]-spread[i]))
}
summary(dif)
t <- read.csv("/Users/michaelberk/documents/Schork/Schork Project/Modeling/X_V_spread.csv")
spread <- t$X_CLOSE - t$V_CLOSE
table(t$SPIKE_FORECASTED)
t <- read.csv("/Users/michaelberk/documents/Schork/Schork Project/Modeling/X_V_spread.csv")
table(t$SPIKE_FORECASTED)
t <- read.csv("/Users/michaelberk/documents/Schork/Schork Project/Modeling/X_V_spread.csv")
table(t$SPIKE_FORECASTED)
dif <- c()
for (i in 1:(length(t$SPREAD)-1)) {
dif <- c(dif,(spread[i+1]-spread[i]))
}
sum(dif > 0.001)
names(t)
c
S
t <- read.csv("/Users/michaelberk/documents/Schork/Schork Project/Modeling/X_V_spread.csv")
table(t$SPIKE_FORECASTED)
View(t)
t <- read.csv("/Users/michaelberk/documents/Schork/Schork Project/Modeling/X_V_spread.csv")
View(t)
t <- read.csv("/Users/michaelberk/documents/Schork/Schork Project/Modeling/X_V_spread.csv")
View(t)
table(t$DROP_FORECASTED == t$SPIKE_FORECASTED)
substrate <- read.xlsx(path+'Belt.xlsx')
#############3 Read in Files #############3
path = '~/michaelberk/Documents/Penn 2019-2020/Senior Thesis/Data/'
substrate <- read.xlsx(path+'Belt.xlsx')
#############3 Read in Files #############3
require(gdata)
install.packages("readxl")
install.packages("readxl")
#############3 Read in Files #############3
library("readxl")
path = '~/michaelberk/Documents/Penn 2019-2020/Senior Thesis/Data/'
substrate <- read.xlsx(path+'Belt.xlsx')
substrate <- read_excel(path+'Belt.xlsx')
substrate <- read_excel(paste(path, 'Belt.xlsx'), sep = '')
substrate <- read_excel(paste(path, 'Belt.xlsx', sep = ''))
path = '~/Documents/Penn 2019-2020/Senior Thesis/Data/'
substrate <- read_excel(paste(path, 'Belt.xlsx', sep = ''))
dim(substrate)
substrate <- read_excel(paste(path, 'Substrate.xlsx', sep = ''))
descriptors_non <- read_excel(paste(path, 'Non-Static Descriptors.xlsx', sep = ''))
descriptors_static <- read_excel(paste(path, 'Static Descriptors.xlsx', sep = ''))
dim(substrate)
dim(descriptors_static)
dim(descriptors_non)
dim(belt)
belt <- read_excel(paste(path, 'Belt.xlsx', sep = ''))
dim(belt)
belt <- read_excel(paste(path, 'Belt.xlsx', sep = ''))
#############3 Read in Files #############3
library("readxl")
path = '~/Documents/Penn 2019-2020/Senior Thesis/Data/'
belt <- read_excel(paste(path, 'Belt.xlsx', sep = ''))
descriptors_non <- read_excel(paste(path, 'Non-Static Descriptors.xlsx', sep = ''))
descriptors_static <- read_excel(paste(path, 'Static Descriptors.xlsx', sep = ''))
substrate <- read_excel(paste(path, 'Substrate.xlsx', sep = ''))
View(belt)
View(descriptors_non)
View(descriptors_static)
View(substrate)
#############3 Read in Files #############3
library("readxl")
path = '~/Documents/Penn 2019-2020/Senior Thesis/Data/'
belt <- read_excel(paste(path, 'Belt.xlsx', sep = ''))
View(belt)
unique(belt$`Organism Code`])
unique(belt$`Organism Code`)
descriptors_non <- read_excel(paste(path, 'Non-Static Descriptors.xlsx', sep = ''))
descriptors_static <- read_excel(paste(path, 'Static Descriptors.xlsx', sep = ''))
View(descriptors_non)
View(descriptors_static)
##############################
##############################
# Setup
##############################
##############################
# imports
library(glmnet)
install.packages(glmnet)
# Read in data
df <- read.csv(file= '/Users/michaelberk/Documents/Penn 2019-2020/Senior Thesis/Data/df1.0.csv')
##############################
##############################
# Setup
##############################
##############################
# imports
library(glmnet)
# remove question marks in names
names(df) = sub("?", "", names(df))
# recode '' as NA
df[df == ''] <- NA
# get common columns
commonCols = c('TRASH GENERAL','GROUPER TOTAL','SNAPPER','PENCIL URCHIN','PARROTFISH','MORAY EEL','LOBSTER','CORAL DAMAGE OTHER','BUTTERFLYFISH')
anthroCols=c('Siltation','Dynamite.Fishing.','Poison.Fishing.',
'Aquarium.fish.collection','Harvest.of.inverts.for.food',
'Harvest.of.inverts.for.curio','Tourist.diving/snorkeling',
'Sewage.pollution','Industrial.pollution','Commercial.fishing',
'Live.food.fishing',
'Yachts','Level.of.other.impacts.',
'Is.protection.enforced.','Level.of.poaching.',
'Spearfishing.','Commercial.fishing.','Recreational.fishing.',
'Invertebrate/shell.collection.','Anchoring.','Diving.')
##############################
##############################
# LASSO
##############################
##############################
# create formula
anthroString = paste(anthroCols[1:3], collapse=' + ')
formula = as.formula(paste("GROUPER.TOTAL ~ ",anthroString, sep = ""))
# setup vars
Y <- df['GROUPER.TOTAL']
X <- model.matrix(formula, data=df)
# fit lasso
fit.lasso <- cv.glmnet(X, Y, alpha=1, nfolds=10)
# perform pois
m1 <- glm(formula, family="poisson", data=df)
summary(m1)
##############################
##############################
# GLM
##############################
##############################
# create formula
anthroString = paste(anthroCols, collapse=' + ')
formula = paste("GROUPER.TOTAL ~ ",anthroString, sep = "")
# perform pois
m1 <- glm(formula, family="poisson", data=df)
anthroCols=c('Siltation','Dynamite.Fishing.','Poison.Fishing.',
'Aquarium.fish.collection','Harvest.of.inverts.for.food',
'Harvest.of.inverts.for.curio','Tourist.diving/snorkeling',
'Sewage.pollution','Industrial.pollution','Commercial.fishing',
'Live.food.fishing',
'Yachts','Level.of.other.impacts.',
'Is.protection.enforced.','Level.of.poaching.',
'Spearfishing.','Commercial.fishing.','Recreational.fishing.',
'Invertebrate/shell.collection.','Anchoring.','Diving.')
##############################
##############################
# GLM
##############################
##############################
# create formula
anthroString = paste(anthroCols, collapse=' + ')
formula = paste("GROUPER.TOTAL ~ ",anthroString, sep = "")
# perform pois
m1 <- glm(formula, family="poisson", data=df)
anthroCols=c('Siltation','Dynamite.Fishing.','Poison.Fishing.',
'Aquarium.fish.collection','Harvest.of.inverts.for.food',
'Harvest.of.inverts.for.curio','Tourist.diving/snorkeling.',
'Sewage.pollution','Industrial.pollution','Commercial.fishing.',
'Live.food.fishing',
'Yachts','Level.of.other.impacts.',
'Is.protection.enforced.','Level.of.poaching.',
'Spearfishing.','Commercial.fishing.','Recreational.fishing.',
'Invertebrate/shell.collection.','Anchoring.','Diving.')
##############################
##############################
# GLM
##############################
##############################
# create formula
anthroString = paste(anthroCols, collapse=' + ')
formula = paste("GROUPER.TOTAL ~ ",anthroString, sep = "")
# perform pois
m1 <- glm(formula, family="poisson", data=df)
anthroCols=c('Siltation','Dynamite.Fishing.','Poison.Fishing.',
'Aquarium.fish.collection','Harvest.of.inverts.for.food',
'Harvest.of.inverts.for.curio','Tourist.diving/snorkeling.',
'Sewage.pollution','Industrial.pollution','Commercial.fishing.',
'Live.food.fishing',
'Yachts','Level.of.other.impacts.',
'Is.protection.enforced.','Level.of.poaching.',
'Spearfishing.','Commercial.fishing.','Recreational.fishing.',
'Invertebrate/shell.collection.','Anchoring.','Diving.')
##############################
##############################
# GLM
##############################
##############################
# create formula
anthroString = paste(anthroCols, collapse=' + ')
formula = paste("GROUPER.TOTAL ~ ",anthroString, sep = "")
# perform pois
m1 <- glm(formula, family="poisson", data=df)
formula
anthroCols=c('Siltation','Dynamite.Fishing.','Poison.Fishing.',
'Aquarium.fish.collection','Harvest.of.inverts.for.food',
'Harvest.of.inverts.for.curio','Tourist.diving/snorkeling',
'Sewage.pollution','Industrial.pollution','Commercial.fishing',
'Live.food.fishing',
'Yachts','Level.of.other.impacts.',
'Is.protection.enforced.','Level.of.poaching.',
'Spearfishing.','Commercial.fishing.','Recreational.fishing.',
'Invertebrate/shell.collection.','Anchoring.','Diving.')
##############################
##############################
# GLM
##############################
##############################
# create formula
anthroString = paste(anthroCols, collapse=' + ')
formula = paste("GROUPER.TOTAL ~ ",anthroString, sep = "")
# perform pois
m1 <- glm(formula, family="poisson", data=df)
m1
formual
formula
anthroCols=c('Siltation','Dynamite.Fishing.','Poison.Fishing.',
'Aquarium.fish.collection','Harvest.of.inverts.for.food',
'Harvest.of.inverts.for.curio',#'Tourist.diving/snorkeling',
'Sewage.pollution','Industrial.pollution','Commercial.fishing',
'Live.food.fishing',
'Yachts','Level.of.other.impacts.',
'Is.protection.enforced.','Level.of.poaching.',
'Spearfishing.','Commercial.fishing.','Recreational.fishing.',
'Invertebrate/shell.collection.','Anchoring.','Diving.')
##############################
##############################
# LASSO
##############################
##############################
# create formula
anthroString = paste(anthroCols[1:3], collapse=' + ')
formula = as.formula(paste("GROUPER.TOTAL ~ ",anthroString, sep = ""))
# setup vars
Y <- df['GROUPER.TOTAL']
X <- model.matrix(formula, data=df)
##############################
##############################
# GLM
##############################
##############################
# create formula
anthroString = paste(anthroCols, collapse=' + ')
formula = paste("GROUPER.TOTAL ~ ",anthroString, sep = "")
# perform pois
m1 <- glm(formula, family="poisson", data=df)
formula
# Read in data
df <- read.csv(file= '/Users/michaelberk/Documents/Penn 2019-2020/Senior Thesis/Data/df1.0.csv')
# remove question marks in names
names(df) = sub("?", "", names(df))
names(df) = sub("/", ".", names(df))
# recode '' as NA
df[df == ''] <- NA
# get common columns
commonCols = c('TRASH GENERAL','GROUPER TOTAL','SNAPPER','PENCIL URCHIN','PARROTFISH','MORAY EEL','LOBSTER','CORAL DAMAGE OTHER','BUTTERFLYFISH')
anthroCols=c('Siltation','Dynamite.Fishing.','Poison.Fishing.',
'Aquarium.fish.collection','Harvest.of.inverts.for.food',
'Harvest.of.inverts.for.curio',#'Tourist.diving/snorkeling',
'Sewage.pollution','Industrial.pollution','Commercial.fishing',
'Live.food.fishing',
'Yachts','Level.of.other.impacts.',
'Is.protection.enforced.','Level.of.poaching.',
'Spearfishing.','Commercial.fishing.','Recreational.fishing.',
'Invertebrate/shell.collection.','Anchoring.','Diving.')
anthroCols=c('Siltation','Dynamite.Fishing.','Poison.Fishing.',
'Aquarium.fish.collection','Harvest.of.inverts.for.food',
'Harvest.of.inverts.for.curio','Tourist.diving.snorkeling',
'Sewage.pollution','Industrial.pollution','Commercial.fishing',
'Live.food.fishing',
'Yachts','Level.of.other.impacts.',
'Is.protection.enforced.','Level.of.poaching.',
'Spearfishing.','Commercial.fishing.','Recreational.fishing.',
'Invertebrate.shell.collection.','Anchoring.','Diving.')
##############################
##############################
# GLM
##############################
##############################
# create formula
anthroString = paste(anthroCols, collapse=' + ')
formula = paste("GROUPER.TOTAL ~ ",anthroString, sep = "")
# perform pois
m1 <- glm(formula, family="poisson", data=df)
# perform pois
m1 <- glm(formula, family="poisson", data=df, na.action = "na.omit")
# perform pois
m1 <- glm(formula, family="poisson", data=df, na.action = "na.omit")
# perform pois
m1 <- glm(formula, family="poisson", data=df, na.action = na.omit)
# perform pois
m1 <- glm(formula, family="poisson", data=df, na.action = na.omit)
summary(df)
summary(df[anthroCols])
df[anthroCols][df[anthroCols] == '1.0'] <- NA
summary(df[anthroCols])
df[anthroCols][df[anthroCols] == '1.0'] <- NA
df[anthroCols][df[anthroCols] == '10.0'] <- NA
df[anthroCols][df[anthroCols] == '0.0'] <- NA
summary(df[anthroCols])
##############################
##############################
# GLM
##############################
##############################
# create formula
anthroString = paste(anthroCols, collapse=' + ')
formula = paste("GROUPER.TOTAL ~ ",anthroString, sep = "")
# perform pois
m1 <- glm(formula, family="poisson", data=df, na.action = na.omit)
##############################
##############################
# GLM
##############################
##############################
# create formula
anthroString = paste(anthroCols[1:3], collapse=' + ')
formula = paste("GROUPER.TOTAL ~ ",anthroString, sep = "")
# perform pois
m1 <- glm(formula, family="poisson", data=df, na.action = na.omit)
m1
##############################
##############################
# GLM
##############################
##############################
# create formula
anthroString = paste(anthroCols[1:5], collapse=' + ')
formula = paste("GROUPER.TOTAL ~ ",anthroString, sep = "")
# perform pois
m1 <- glm(formula, family="poisson", data=df, na.action = na.omit)
m1
##############################
##############################
# GLM
##############################
##############################
######### train test split
smp_size <- floor(0.75 * nrow(df))
## set the seed to make your partition reproducible
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
# perform pois
m1 <- glm(formula, family="poisson", data=train, na.action = na.omit)
# test accuracy
m1.predict(test)
shape(train)
dim(train)
dim(tets)
dim(test)
# perform pois
m1 <- glm(formula, family="poisson", data=train, na.action = na.omit)
m1
# test accuracy
predict(m1, newdata=test)
# perform pois
m1 <- glm(formula, family=poisson(link = "log"), data=train, na.action = na.omit)
# perform pois
m1 <- glm(formula, family=poisson(link = "log"), data=train, na.action = na.omit)
summary(m1)
# test accuracy
predict(m1, newdata=test, type = "response")
cor(pred, test['GROUPER.TOTAL'])
# test accuracy
pred = predict(m1, newdata=test, type = "response")
cor(pred, test['GROUPER.TOTAL'])
cor(na.omit(pred, test['GROUPER.TOTAL']))
cvfit = cv.glmnet(formula, family = "poisson")
install.packages('cv.glmnet')
##############################
##############################
# Setup
##############################
##############################
# imports
library(glmnet)
install.packages('glmnet')
names(df)
df(anthroCols)
df(susbetCols('anthro'))
source('~/Documents/Penn 2019-2020/Senior Thesis/Scripts/ReefCheckModeling/Code/Helpers.R', echo=TRUE)
df(susbetCols('anthro'))
df(subsetCols('anthro'))
df(df, subsetCols('anthro'))
df(subsetCols('anthro'))
subsetCols('anthro')
summary(df[subsetCols('anthro')])
summary(df[.subsetCols('anthro')])
summary(df[,subsetCols('anthro')])
cols <- subsetCols('anthro')
cols
df[cols]
#####################
# get Helpers.R
#####################
# set wd and df based on user
if (dir.exists("/Users/michaelberk")) {
setwd('~/Documents/Penn 2019-2020/Senior Thesis/Scripts/ReefCheckModeling/')
} else {
setwd('~/Dropbox/Projects/Reefs/')
}
# run helpers
source("Code/Helpers.R")
# setup data
dfo <- loadDF()
df <- dfo
df[cols]
summary(df[cols])
