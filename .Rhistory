responseVar <- 'GROUPER.TOTAL'
df[,responseVar] <- round(df[,responseVar])
df <- subset(df, !is.na(df[,responseVar])) # drop na in y var
organisms <- organisms[!organisms %in% c(responseVar)] # remove var from formula
# create formula
xs <- paste(organisms, collapse="+")
formula <- formula(paste(c(responseVar, xs), collapse='~'))
# create train and test split
pacman::p_load(caTools)
sample = sample.split(df[,responseVar], SplitRatio = .75)
train = subset(df, sample == TRUE)
test  = subset(df, sample == FALSE)
###########################
# Poisson
###########################
# perform zero inflated pois
zip.fit <- zeroinfl(formula, data = train, dist = 'poisson')
summary(zip.fit)
###########################
# RF
###########################
# create model
rfRough <- randomForest(
formula,
data=train,
na.action=na.roughfix
)
rfRough # 13% variance
rfPred <- predict(rfRough, newdata=test)
rfPred
cor(rfPred, test[,responseVar])
cor(rfPred, test[,responseVar], use = "complete.obs")
###########################
# Poisson
###########################
# perform zero inflated pois
zip.fit <- zeroinfl(formula, data = train, dist = 'poisson')
summary(zip.fit)
# get correlation
rfPred <- predict(zip.fit, newdata=test)
cor(rfPred, test[,responseVar], use = "complete.obs")
###########################
# Poisson
###########################
# perform zero inflated pois
zip.fit <- zeroinfl(formula, data = train, dist = 'poisson')
summary(zip.fit)
# get correlation
zipPred <- predict(zip.fit, newdata=test)
cor(zipPred, test[,responseVar], use = "complete.obs")
zipPred
# get correlation
zipPred <- predict(zip.fit, newdata=test)
cor(zipPred, test[,responseVar], use = "complete.obs")
#########################
#########################
# Load and setup df (MICEd)
#########################
#########################
# read in RData
load("Data/miceAnthro.RData")
df <- allAnthro
summary(df)
# determine response variable and convert to ints
names(df)
responseVar <- 'LOBSTER'
df[,responseVar] <- round(df[,responseVar])
# drop NA in y var
df <- subset(df, !is.na(df[,responseVar])) # drop na in y var
# create formula
anthroVars <- c("WATER.TEMP.AT.SURFACE","DYNAMITE.FISHING","POISON.FISHING","AQUARIUM.FISH.COLLECTION","HARVEST.OF.INVERTS.FOR.FOOD",
"HARVEST.OF.INVERTS.FOR.CURIO","TOURIST.DIVING.SNORKELING","SEWAGE.POLLUTION",
"INDUSTRIAL.POLLUTION","COMMERCIAL.FISHING")
xs <- paste(anthroVars, collapse="+")
formula <- formula(paste(c(responseVar, xs), collapse='~'))
# create train and test split
pacman::p_load(caTools)
sample = sample.split(df[,responseVar], SplitRatio = .75)
train = subset(df, sample == TRUE)
test  = subset(df, sample == FALSE)
#########################
#########################
# Poisson Reg
#########################
#########################
# fit glm poisson
pois.fit <- glm(formula, data=train,family='poisson')
summary(pois.fit)
#########################
#########################
# Poisson Reg
#########################
#########################
# fit glm poisson
pois.fit <- glm(formula, data=train,family='poisson')
summary(pois.fit)
poisPred <- predict(pois.fit, newdata=test)
cor(poisPred, test[,responseVar], use = "complete.obs")
# perform zero inflated pois (NOT WORKING DUE TO COLLINEARITY OF VARIABLES - col 4 and col 1-3)
zip.fit <- zeroinfl(formula, data = train, dist = 'poisson')
summary(zip.fit)
# get preds
poisPred <- predict(zip.fit, newdata=test)
# Develop anthropogentic models that explain and forecast health indicators using a MICED dataset
#########################
#########################
# Load and setup df (MICEd)
#########################
#########################
# read in RData
load("Data/miceAnthro.RData")
df <- allAnthro
summary(df)
# determine response variable and convert to ints
names(df)
responseVar <- 'LOBSTER'
df[,responseVar] <- round(df[,responseVar])
# drop NA in y var
df <- subset(df, !is.na(df[,responseVar])) # drop na in y var
# create formula
anthroVars <- c("WATER.TEMP.AT.SURFACE","DYNAMITE.FISHING","POISON.FISHING","AQUARIUM.FISH.COLLECTION","HARVEST.OF.INVERTS.FOR.FOOD",
"HARVEST.OF.INVERTS.FOR.CURIO","TOURIST.DIVING.SNORKELING","SEWAGE.POLLUTION",
"INDUSTRIAL.POLLUTION","COMMERCIAL.FISHING")
xs <- paste(anthroVars, collapse="+")
formula <- formula(paste(c(responseVar, xs), collapse='~'))
# create train and test split
pacman::p_load(caTools)
sample = sample.split(df[,responseVar], SplitRatio = .75)
train = subset(df, sample == TRUE)
test  = subset(df, sample == FALSE)
#########################
#########################
# Poisson Reg
#########################
#########################
# fit glm poisson
pois.fit <- glm(formula, data=train,family='poisson')
summary(pois.fit)
# get preds
poisPred <- predict(pois.fit, newdata=test)
cor(poisPred, test[,responseVar], use = "complete.obs") # 0.057
# perform zero inflated pois (NOT WORKING DUE TO COLLINEARITY OF VARIABLES - col 4 and col 1-3)
zip.fit <- zeroinfl(formula, data = train, dist = 'poisson')
summary(zip.fit)
# get preds
poisPred <- predict(zip.fit, newdata=test)
cor(poisPred, test[,responseVar], use = "complete.obs") # 0.057
#########################
#########################
# Load and setup df (MICEd)
#########################
#########################
# read in RData
load("Data/miceAnthro.RData")
df <- allAnthro
summary(df)
# determine response variable and convert to ints
names(df)
responseVar <- 'LOBSTER'
df[,responseVar] <- round(df[,responseVar])
# drop NA in y var
df <- subset(df, !is.na(df[,responseVar])) # drop na in y var
# create formula
anthroVars <- c("WATER.TEMP.AT.SURFACE","DYNAMITE.FISHING","POISON.FISHING","AQUARIUM.FISH.COLLECTION","HARVEST.OF.INVERTS.FOR.FOOD",
"HARVEST.OF.INVERTS.FOR.CURIO","TOURIST.DIVING.SNORKELING","SEWAGE.POLLUTION",
"INDUSTRIAL.POLLUTION","COMMERCIAL.FISHING")
xs <- paste(anthroVars, collapse="+")
formula <- formula(paste(c(responseVar, xs), collapse='~'))
# create train and test split
pacman::p_load(caTools)
sample = sample.split(df[,responseVar], SplitRatio = .75)
train = subset(df, sample == TRUE)
test  = subset(df, sample == FALSE)
#########################
#########################
# Poisson Reg
#########################
#########################
# fit glm poisson
pois.fit <- glm(formula, data=train,family='poisson')
summary(pois.fit)
# get preds
poisPred <- predict(pois.fit, newdata=test)
cor(poisPred, test[,responseVar], use = "complete.obs") # 0.057
# perform zero inflated pois (NOT WORKING DUE TO COLLINEARITY OF VARIABLES - col 4 and col 1-3)
zip.fit <- zeroinfl(formula, data = train, dist = 'poisson')
summary(Lobster)
summary(train$Lobster)
dim(train)
names(train)
xs <- paste(anthroVars, collapse="+")
formula <- formula(paste(c(responseVar, xs), collapse='~'))
# create train and test split
pacman::p_load(caTools)
sample = sample.split(df[,responseVar], SplitRatio = .75)
train = subset(df, sample == TRUE)
test  = subset(df, sample == FALSE)
#########################
#########################
# Poisson Reg
#########################
#########################
# fit glm poisson
pois.fit <- glm(formula, data=train,family='poisson')
summary(pois.fit)
# get preds
poisPred <- predict(pois.fit, newdata=test)
cor(poisPred, test[,responseVar], use = "complete.obs") # 0.057
# perform zero inflated pois (NOT WORKING DUE TO COLLINEARITY OF VARIABLES - col 4 and col 1-3)
zip.fit <- zeroinfl(formula, data = train, dist = 'poisson')
summary(zip.fit)
# model (rough NA imputation)
rfRough <- randomForest(
formula,
data=train
)
# evaluate
rfRough
# get cor of preds
pred <- predict(rfRough, newdata = test)
cor(pred, test[,responseVar])
# get cor of preds
pred <- predict(rfRough, newdata = test)
cor(pred, test[,responseVar], use = "complete.obs")
#######################################
#######################################
# Setup variables
#######################################
#######################################
# set wd and df based on user
if (dir.exists("/Users/michaelberk")) {
setwd('~/Documents/Penn 2019-2020/Senior Thesis/Scripts/ReefCheckModeling/')
df <- read.csv('Data/df1.0.csv')
} else {
setwd('~/Dropbox/Projects/Reefs/')
df <- read.csv('Data/df1.0.csv')
}
# clean anthro vars
organisms <- c('ARABIAN BUTTERFLYFISH','ASPERGILLOSIS','BANDED CORAL SHRIMP','BARRACUDA',
'BARRAMUNDI COD','BLACK BAND','BLACK BAND','BLACK SPOTTED GRUNT',
'BLACK URCHIN','BLEACHING (% OF COLONY)','BLEACHING (% OF POPULATION)',
'BLUE SEA STAR','BLUELINE SNAPPER','BROOMTAIL WRASSE',
'BUMPHEAD PARROT','BUTTERFLYFISH','COTS',
'COWRIES','DARK BUTTERFLYFISH','DARK BUTTERFLYFISH','DIADEMA',
'EDIBLE SEA CUCUMBER','FLAMINGO TONGUE','GIANT CLAM 10-20 CM',
'GIANT CLAM 20-30 CM','GIANT CLAM 30-40 CM','GIANT CLAM 40-50 CM',
'GIANT CLAM <10 CM','GIANT CLAM >50 CM','GIANT CLAM TOTAL',
'GIANT HAWKFISH','GOATFISH','GORGONIAN','GREY GRUNT','GROUPER 30-40 CM',
'GROUPER 40-50 CM','GROUPER 50-60 CM','GROUPER >60 CM','GROUPER TOTAL',
'GRUNTS','HAEMULIDAE','HELMET CONCH','HUMPHEAD WRASSE',
'JACKS','KING ANGELFISH','LIONFISH','LOBSTER','LONGFIN BANNERFISH',
'MANTAS','MEXICAN HOGFISH','MORAY EEL','NASSAU GROUPER 30-40 CM',
'NASSAU GROUPER 40-50 CM','NASSAU GROUPER 50-60 CM',
'NASSAU GROUPER >60 CM','NASSAU GROUPER TOTAL','NASSAU GROUPER 30-40 CM',
'NASSAU GROUPER 40-50 CM','NASSAU GROUPER 50-60 CM',
'NASSAU GROUPER >60 CM','NASSAU GROUPER TOTAL','ORANGE SPINE UNICORNFISH',
'ORANGE SPOTTED GROUPER 30-40 CM','ORANGE SPOTTED GROUPER 40-50 CM',
'ORANGE SPOTTED GROUPER 50-60 CM','ORANGE SPOTTED GROUPER >60 CM',
'ORANGE SPOTTED GROUPER TOTAL','PARROTFISH',
'PEACOCK GROUPER 30-40 CM','PEACOCK GROUPER 40-50 CM',
'PEACOCK GROUPER 50-60 CM','PEACOCK GROUPER >60 CM',
'PEACOCK GROUPER TOTAL','PENCIL URCHIN','QUEEN CONCH','SEA FAN','SHARKS',
'SHORT SPINE URCHIN','SLATE PENCIL URCHIN','SNAPPER',
'SPIDER CRAB','SPOTTED GRUNT','TRIPNEUSTES','TRITON','TROCHUS','TURTLES',
'WHITE BAND','WHITE PLAGUE','WHITE BAND','YELLOW GOATFISH','YELLOW TANG',
'YELLOWBAR ANGELFISH','YELLOWTAIL TANG')
organisms <- toupper(gsub("/","\\.",gsub("\\?","\\.",gsub(" ","\\.",organisms))))
organisms <- ifelse(substr(organisms,nchar(organisms),nchar(organisms))==".",substr(organisms,1,nchar(organisms)-1),organisms)
# clean df names
names(df) <- ifelse(substr(names(df),nchar(names(df)),nchar(names(df)))==".",substr(names(df),1,nchar(names(df))-1),names(df))
names(df) <- toupper(names(df))
# get organisms subset
organisms <- names(df)[names(df) %in% organisms]
# susbet organsisms to desired list
organisms <- c('SNAPPER','TRIPNEUSTES','TRITON','PENCIL.URCHIN','PARROTFISH','MORAY.EEL','LOBSTER','HUMPHEAD.WRASSE','GROUPER.TOTAL',
'HAEMULIDAE','GIANT.CLAM.TOTAL','EDIBLE.SEA.CUCUMBER','DIADEMA','COTS','BUTTERFLYFISH','BUMPHEAD.PARROT','BARRAMUNDI.COD',
'BANDED.CORAL.SHRIMP')
errorOrganisms <- c("HAEMULIDAE",'GIANT.CLAM.TOTAL','EDIBLE.SEA.CUCUMBER','DIADEMA','COTS')
organisms <- organisms [! organisms %in% errorOrganisms]
# clean response
responseVar <- 'GROUPER.TOTAL'
df[,responseVar] <- round(df[,responseVar])
df <- subset(df, !is.na(df[,responseVar])) # drop na in y var
organisms <- organisms[!organisms %in% c(responseVar)] # remove var from formula
# create formula
xs <- paste(organisms, collapse="+")
formula <- formula(paste(c(responseVar, xs), collapse='~'))
# create train and test split
pacman::p_load(caTools)
sample = sample.split(df[,responseVar], SplitRatio = .75)
train = subset(df, sample == TRUE)
test  = subset(df, sample == FALSE)
###########################
# Poisson
###########################
# perform zero inflated pois
zip.fit <- zeroinfl(formula, data = train, dist = 'poisson')
summary(zip.fit)
# get correlation
zipPred <- predict(zip.fit, newdata=test)
cor(zipPred, test[,responseVar], use = "complete.obs")
###########################
# RF
###########################
# create model
rfRough <- randomForest(
formula,
data=train,
na.action=na.roughfix
)
rfRough
# get correlation
rfPred <- predict(rfRough, newdata=test)
cor(rfPred, test[,responseVar], use = "complete.obs")
#########################
#########################
# Load and setup df (MICEd)
#########################
#########################
# read in RData
load("Data/miceAnthro.RData")
df <- allAnthro
summary(df)
# set wd and df based on user
if (dir.exists("/Users/michaelberk")) {
setwd('~/Documents/Penn 2019-2020/Senior Thesis/Scripts/ReefCheckModeling/')
df <- read.csv('Data/df1.0.csv')
} else {
setwd('~/Dropbox/Projects/Reefs/')
df <- read.csv('Data/df1.0.csv')
}
# clean anthro vars
anthro.vars <- c('Siltation', 'Dynamite Fishing?', 'Poison Fishing?', 'Aquarium fish collection', 'Harvest of inverts for food',
'Harvest of inverts for curio', 'Tourist diving/snorkeling', 'Sewage pollution', 'Industrial pollution', 'Commercial fishing',
'Live food fishing', 'Yachts', 'Level of other impacts?', 'Is protection enforced?', 'Level of poaching?', 'Spearfishing?',
'Commercial fishing?', 'Recreational fishing?', 'Invertebrate/shell collection?', 'Anchoring?', 'Diving?')
summary(df[,anthro.vars]
)
# clean anthro vars
anthro.vars <- c('Siltation', 'Dynamite Fishing?', 'Poison Fishing?', 'Aquarium fish collection', 'Harvest of inverts for food',
'Harvest of inverts for curio', 'Tourist diving/snorkeling', 'Sewage pollution', 'Industrial pollution', 'Commercial fishing',
'Live food fishing', 'Yachts', 'Level of other impacts?', 'Is protection enforced?', 'Level of poaching?', 'Spearfishing?',
'Commercial fishing?', 'Recreational fishing?', 'Invertebrate/shell collection?', 'Anchoring?', 'Diving?')
anthro.vars <- toupper(gsub("/","\\.",gsub("\\?","\\.",gsub(" ","\\.",anthro.vars))))
anthro.vars <- ifelse(substr(anthro.vars,nchar(anthro.vars),nchar(anthro.vars))==".",substr(anthro.vars,1,nchar(anthro.vars)-1),anthro.vars)
# clean df names
names(df) <- ifelse(substr(names(df),nchar(names(df)),nchar(names(df)))==".",substr(names(df),1,nchar(names(df))-1),names(df))
names(df) <- toupper(names(df))
anthro.vars <- names(df)[names(df) %in% anthro.vars]
temp.vars <-  toupper(c("Water.temp.at.surface","Water.temp.at.5m","Water.temp.at.10m"))
summary(df[,anthro.vars])
#########################
#########################
# Load and setup df (MICEd)
#########################
#########################
# read in RData
load("Data/miceAnthro.RData")
df <- allAnthro
summary(df)
# create formula
anthroVars <- c("WATER.TEMP.AT.SURFACE","DYNAMITE.FISHING","POISON.FISHING","AQUARIUM.FISH.COLLECTION","HARVEST.OF.INVERTS.FOR.FOOD",
"HARVEST.OF.INVERTS.FOR.CURIO","TOURIST.DIVING.SNORKELING","SEWAGE.POLLUTION",
"INDUSTRIAL.POLLUTION","COMMERCIAL.FISHING")
summary(df[,anthroVars])
#########################
#########################
# Load and setup df (MICEd)
#########################
#########################
# read in RData
load("Data/miceAnthro.RData")
df <- allAnthro
summary(df)
# determine response variable and convert to ints
names(df)
responseVar <- 'LOBSTER'
df[,responseVar] <- round(df[,responseVar])
# drop NA in y var
df <- subset(df, !is.na(df[,responseVar])) # drop na in y var
# create formula
anthroVars <- c("WATER.TEMP.AT.SURFACE","DYNAMITE.FISHING","POISON.FISHING","AQUARIUM.FISH.COLLECTION","HARVEST.OF.INVERTS.FOR.FOOD",
"HARVEST.OF.INVERTS.FOR.CURIO","TOURIST.DIVING.SNORKELING","SEWAGE.POLLUTION",
"INDUSTRIAL.POLLUTION","COMMERCIAL.FISHING")
xs <- paste(anthroVars, collapse="+")
formula <- formula(paste(c(responseVar, xs), collapse='~'))
# create train and test split
pacman::p_load(caTools)
sample = sample.split(df[,responseVar], SplitRatio = .75)
train = subset(df, sample == TRUE)
test  = subset(df, sample == FALSE)
#########################
#########################
# Poisson Reg
#########################
#########################
# fit glm poisson
pois.fit <- glm(formula, data=train,family='poisson')
summary(pois.fit)
tmp <- model.matrix(formula)
tmp <- model.matrix(formula,data=train)
dim(tmp)
eigen(tmp)
svd(tmp)
svd(tmp)$s
names(svd(tmp))
svd(tmp)$d
class(train$AQUARIUM.FISH.COLLECTION)
table(train$AQUARIUM.FISH.COLLECTION)
sum(train$AQUARIUM.FISH.COLLECTION=="")
#########################
#########################
# Poisson Reg
#########################
#########################
# fit glm poisson
pois.fit <- glm(formula, data=train[train$AQUARIUM.FISH.COLLECTION!="",],family='poisson')
summary(pois.fit)
table(train$COMMERCIAL.FISHING)
#######################################
#######################################
# Setup variables
#######################################
#######################################
# set wd and df based on user
if (dir.exists("/Users/michaelberk")) {
setwd('~/Documents/Penn 2019-2020/Senior Thesis/Scripts/ReefCheckModeling/')
df <- read.csv('Data/df1.0.csv')
} else {
setwd('~/Dropbox/Projects/Reefs/')
df <- read.csv('Data/df1.0.csv')
}
# clean anthro vars
organisms <- c('ARABIAN BUTTERFLYFISH','ASPERGILLOSIS','BANDED CORAL SHRIMP','BARRACUDA',
'BARRAMUNDI COD','BLACK BAND','BLACK BAND','BLACK SPOTTED GRUNT',
'BLACK URCHIN','BLEACHING (% OF COLONY)','BLEACHING (% OF POPULATION)',
'BLUE SEA STAR','BLUELINE SNAPPER','BROOMTAIL WRASSE',
'BUMPHEAD PARROT','BUTTERFLYFISH','COTS',
'COWRIES','DARK BUTTERFLYFISH','DARK BUTTERFLYFISH','DIADEMA',
'EDIBLE SEA CUCUMBER','FLAMINGO TONGUE','GIANT CLAM 10-20 CM',
'GIANT CLAM 20-30 CM','GIANT CLAM 30-40 CM','GIANT CLAM 40-50 CM',
'GIANT CLAM <10 CM','GIANT CLAM >50 CM','GIANT CLAM TOTAL',
'GIANT HAWKFISH','GOATFISH','GORGONIAN','GREY GRUNT','GROUPER 30-40 CM',
'GROUPER 40-50 CM','GROUPER 50-60 CM','GROUPER >60 CM','GROUPER TOTAL',
'GRUNTS','HAEMULIDAE','HELMET CONCH','HUMPHEAD WRASSE',
'JACKS','KING ANGELFISH','LIONFISH','LOBSTER','LONGFIN BANNERFISH',
'MANTAS','MEXICAN HOGFISH','MORAY EEL','NASSAU GROUPER 30-40 CM',
'NASSAU GROUPER 40-50 CM','NASSAU GROUPER 50-60 CM',
'NASSAU GROUPER >60 CM','NASSAU GROUPER TOTAL','NASSAU GROUPER 30-40 CM',
'NASSAU GROUPER 40-50 CM','NASSAU GROUPER 50-60 CM',
'NASSAU GROUPER >60 CM','NASSAU GROUPER TOTAL','ORANGE SPINE UNICORNFISH',
'ORANGE SPOTTED GROUPER 30-40 CM','ORANGE SPOTTED GROUPER 40-50 CM',
'ORANGE SPOTTED GROUPER 50-60 CM','ORANGE SPOTTED GROUPER >60 CM',
'ORANGE SPOTTED GROUPER TOTAL','PARROTFISH',
'PEACOCK GROUPER 30-40 CM','PEACOCK GROUPER 40-50 CM',
'PEACOCK GROUPER 50-60 CM','PEACOCK GROUPER >60 CM',
'PEACOCK GROUPER TOTAL','PENCIL URCHIN','QUEEN CONCH','SEA FAN','SHARKS',
'SHORT SPINE URCHIN','SLATE PENCIL URCHIN','SNAPPER',
'SPIDER CRAB','SPOTTED GRUNT','TRIPNEUSTES','TRITON','TROCHUS','TURTLES',
'WHITE BAND','WHITE PLAGUE','WHITE BAND','YELLOW GOATFISH','YELLOW TANG',
'YELLOWBAR ANGELFISH','YELLOWTAIL TANG')
organisms <- toupper(gsub("/","\\.",gsub("\\?","\\.",gsub(" ","\\.",organisms))))
organisms <- ifelse(substr(organisms,nchar(organisms),nchar(organisms))==".",substr(organisms,1,nchar(organisms)-1),organisms)
# clean df names
names(df) <- ifelse(substr(names(df),nchar(names(df)),nchar(names(df)))==".",substr(names(df),1,nchar(names(df))-1),names(df))
names(df) <- toupper(names(df))
# get organisms subset
organisms <- names(df)[names(df) %in% organisms]
# susbet organsisms to desired list
organisms <- c('SNAPPER','TRIPNEUSTES','TRITON','PENCIL.URCHIN','PARROTFISH','MORAY.EEL','LOBSTER','HUMPHEAD.WRASSE','GROUPER.TOTAL',
'HAEMULIDAE','GIANT.CLAM.TOTAL','EDIBLE.SEA.CUCUMBER','DIADEMA','COTS','BUTTERFLYFISH','BUMPHEAD.PARROT','BARRAMUNDI.COD',
'BANDED.CORAL.SHRIMP')
errorOrganisms <- c("HAEMULIDAE",'GIANT.CLAM.TOTAL','EDIBLE.SEA.CUCUMBER','DIADEMA','COTS')
organisms <- organisms [! organisms %in% errorOrganisms]
# clean response
responseVar <- 'GROUPER.TOTAL'
df[,responseVar] <- round(df[,responseVar])
df <- subset(df, !is.na(df[,responseVar])) # drop na in y var
organisms <- organisms[!organisms %in% c(responseVar)] # remove var from formula
# create formula
xs <- paste(organisms, collapse="+")
formula <- formula(paste(c(responseVar, xs), collapse='~'))
formula
# create train and test split
pacman::p_load(caTools)
sample = sample.split(df[,responseVar], SplitRatio = .75)
train = subset(df, sample == TRUE)
test  = subset(df, sample == FALSE)
###########################
# Poisson
###########################
# perform zero inflated pois
zip.fit <- zeroinfl(formula, data = train, dist = 'poisson')
summary(zip.fit)
exp()
exp(0.06)
# get correlation
zipPred <- predict(zip.fit, newdata=test)
cor(zipPred, test[,responseVar], use = "complete.obs")
###########################
# RF
###########################
# create model
rfRough <- randomForest(
formula,
data=train,
na.action=na.roughfix
)
rfRough
# get correlation
rfPred <- predict(rfRough, newdata=test)
cor(rfPred, test[,responseVar], use = "complete.obs")
